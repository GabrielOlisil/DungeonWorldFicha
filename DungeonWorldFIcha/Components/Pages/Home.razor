@page "/"
@inject NavigationManager Navigation
@inject RollCountService RollCountService
@using DungeonWorldFIcha.Models
@using DungeonWorldFIcha.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Dice;
@using DungeonWorldFIcha.Hubs
@using Microsoft.AspNetCore.SignalR
@inject PersonagemService PersonagemService
@inject IHubContext<DadosHub> HubContext
@inject IConfiguration Configuration
@implements IAsyncDisposable

@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<h2>Acompanhamento</h2>

@if (showModal)
{
    <div class="toast show notification" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Rolagem</strong>
            <small>now</small>
            <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @notificationMessage
        </div>
    </div>
}




<div class="container">
    <div class="row">
        <div class="col-9">


            @if (_personagens is not null && _personagens.Any())
            {
                <div class="row row-cols-1 row-cols-md-3 g-4 mb-3">
                    @foreach (var personagem in _personagens)
                    {
                        <div class="col">
                            <div class="card shadow-sm h-100 d-flex flex-column">
                                <div class="overflow-hidden" style="height: 200px;">
                                    <img src="@personagem.ImageUrl" class="card-img-top w-100 h-100 object-fit-cover"
                                         alt="img">
                                </div>
                                <div class="card-body d-flex flex-column justify-content-between">
                                    <div>
                                        <h5 class="card-title">@personagem.Nome</h5>
                                        <p class="card-text">
                                            <strong>Nível:</strong> @personagem.Nivel <br/>
                                            <strong>Pv:</strong> @personagem.Pv <br/>
                                            <strong>Armadura:</strong> @personagem.Armadura
                                        </p>
                                    </div>
                                    <div>
                                        <button class="btn btn-primary w-100 mb-2"
                                                @onclick="() => HandleClick(personagem.PersonagemId)">Visualizar
                                        </button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Seus Personagens aparecerão aqui</p>
            }

        </div>

        <div class="col-3 rounded-1 shadow prompt-container">

            <div class="p-0 row bg-dark overflow-hidden" style="height: 100%">
                @if (_hasRolls)
                {
                    <div class="card text-white bg-dark p-2 mb-5">
                        @foreach (var rolagem in _rolagens)
                        {
                            <pre class="mb-1"><code class="text-white">@rolagem</code></pre>
                            <hr/>
                        }


                    </div>
                }
                else
                {
                    <pre class="text-white p-2">Não há rolagens...</pre>
                }
                
            </div>

            <div class="row bg-dark" >

                <div class="input-group" style="width: 100%">
                    <input type="text" class="form-control rounded-0 bg-dark text-white" placeholder="Rolar Dados"
                           aria-label="Rolar Dados" @bind="_dicePrompt"/>
                    <button class="btn btn-dark" @onclick="(RollDice)">Rolar</button>
                </div>
            </div>
                
        </div>


    </div>
</div>





@code{
    private List<Personagem>? _personagens;

    private HubConnection? _hubConnectionDice;
    private HubConnection? _hubConnectionPersonagem;
    private bool showModal { get; set; } = false;
    private string notificationMessage = "";
    private bool _hasRolls = false;
    private List<string> _rolagens;
    private string _dicePrompt { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        var hubHrl = Configuration["HUB_URL"];

        _hasRolls = RollCountService.IsQueueNotEmpty();
        _rolagens = RollCountService.RenderRoll()
            .Split(";").ToList();


        _personagens = await PersonagemService.GetPersonagens();


        _hubConnectionDice = new HubConnectionBuilder()
            .WithUrl(hubHrl + "/dadosHub")
            .Build();

        _hubConnectionPersonagem = new HubConnectionBuilder()
            .WithUrl(hubHrl + "/personagemHub")
            .Build();

        _hubConnectionDice.On<string>("RolarDado", (message) =>
        {
            // Quando uma mensagem for recebida, mostramos o modal com a mensagem

            notificationMessage = message;
            showModal = true;
            _rolagens = RollCountService.RenderRoll()
                .Split(";").ToList();
            _hasRolls = RollCountService.IsQueueNotEmpty();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });

            
        });


        _hubConnectionPersonagem.On<Personagem>("AtualizarFicha", personagemNovo =>
        {
            var personagemASerAtualizado = _personagens.Find(p => p.PersonagemId == personagemNovo.PersonagemId);

            personagemASerAtualizado!.Nome = personagemNovo.Nome;
            personagemASerAtualizado.Nivel = personagemNovo.Nivel;
            personagemASerAtualizado.Pv = personagemNovo.Pv;
            personagemASerAtualizado.Armadura = personagemNovo.Armadura;


            InvokeAsync(StateHasChanged);

        });


        await _hubConnectionDice.StartAsync();
        await _hubConnectionPersonagem.StartAsync();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }



    public async ValueTask DisposeAsync()
    {
        if (_hubConnectionDice is null) return;

        await _hubConnectionDice.StopAsync(); // Para a conexão
        await _hubConnectionDice.DisposeAsync();


        if (_hubConnectionPersonagem is null) return;

        await _hubConnectionPersonagem.StopAsync(); // Para a conexão
        await _hubConnectionPersonagem.DisposeAsync();
    }

    private void HandleClick(int id)
    {
        Navigation.NavigateTo($"/Personagens/{id}");
    }


    private void RollDice()
    {
        var message = string.Empty;
        try
        {
            var diceResult = Roller.Roll(_dicePrompt);

            message = $"Rolagem Personalizada:\n{diceResult}";
            RollCountService.AddRoll(message);
            _dicePrompt = String.Empty;

            HubContext.Clients.All.SendAsync("RolarDado", message);
        }
        catch
        {
            notificationMessage = "Erro Ao rolar dado";
            showModal = true;
            StateHasChanged();
        }
    }

}

