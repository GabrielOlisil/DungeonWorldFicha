@page "/"
@inject NavigationManager Navigation
@using DungeonWorldFIcha.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Dice;
@using DungeonWorldFIcha.Hubs
@using DungeonWorldFIcha.Services.Interfaces
@using Microsoft.AspNetCore.SignalR
@inject IPersonagemService PersonagemService
@inject IHubContext<DadosHub> HubContext
@inject IRollService RollCountService
@inject IConfiguration Configuration
@implements IAsyncDisposable

@rendermode InteractiveServer


<PageTitle>Home</PageTitle>



@if (ShowModal)
{
    <div class="toast show notification" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Rolagem</strong>
            <small>now</small>
            <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @_notificationMessage
        </div>
    </div>
}




<div class="container-fluid">
    <div class="row">
        <div class="col-md-6 col-lg-9">

            <h2 class="text-center mb-4 mt-4">Acompanhamento</h2>

            @if (_personagens is not null && _personagens.Any())
            {
                <div class="d-flex gap-4 mb-3 flex-wrap justify-content-around">
                    @foreach (var personagem in _personagens)
                    {
                        <div class="card flex-shrink-0 card-person shadow-sm">
                            <div class="overflow-hidden">
                                <img src="@personagem.ImageUrl" class="card-img-top w-100 h-100 object-fit-cover"
                                     alt="img">
                            </div>
                            <div class="card-body d-flex flex-column justify-content-between">
                                <div>
                                    <h5 class="card-title">@personagem.Nome</h5>
                                    <p class="card-text">
                                        <strong>Nível:</strong> @personagem.Nivel <br/>
                                        <strong>Pv:</strong> @personagem.Pv/@personagem.PvTotal <br/>
                                        <strong>Armadura:</strong> @personagem.Armadura
                                    </p>
                                </div>
                                <div>
                                    <button class="btn btn-primary w-100 mb-2"
                                            @onclick="() => HandleClick(personagem.PersonagemId)">Visualizar
                                    </button>

                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Seus Personagens aparecerão aqui</p>
            }

        </div>

        <div class="col-md-6 col-lg-3 bg-dark shadow roll-area mb-5">  @*Tem como fazer esse aqui grudar em baixo na viewport?*@

            <div class="p-0 row  overflow-hidden h-100" >
                @if (_hasRolls)
                {
                    <div class="card text-white bg-dark p-2 mb-5">
                        @foreach (var rolagem in _rolagens!)
                        {
                            <pre class="mb-1"><code class="text-white">@rolagem</code></pre>
                            <hr/>
                        }


                    </div>
                }
                else
                {
                    <pre class="text-white p-2">Não há rolagens...</pre>
                }
                
            </div>

            <div class="row bg-dark" >

                <div class="input-group" style="width: 100%">
                    <input type="text" @onkeydown="HandleInputDice" class="form-control rounded-0 bg-dark text-white" placeholder="Rolar Dados"
                            @bind="DicePrompt"/>
                    <button class="btn btn-dark" @onclick="(RollDice)">Rolar</button>
                </div>
            </div>
                
        </div>
        
    </div>
</div>





@code{
    private List<Personagem>? _personagens;

    private HubConnection? _hubConnectionDice;
    private HubConnection? _hubConnectionPersonagem;
    private bool ShowModal { get; set; }
    private string _notificationMessage = string.Empty;
    private bool _hasRolls;
    private List<string>? _rolagens;
    private string DicePrompt { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var hubHrl = Configuration["HUB_URL"];

        _hasRolls = RollCountService.IsQueueNotEmpty();
        _rolagens = RollCountService.RenderRoll()
            .Split(";").ToList();


        _personagens = await PersonagemService.GetPersonagens();


        _hubConnectionDice = new HubConnectionBuilder()
            .WithUrl(hubHrl + "/dadosHub")
            .Build();

        _hubConnectionPersonagem = new HubConnectionBuilder()
            .WithUrl(hubHrl + "/personagemHub")
            .Build();

        _hubConnectionDice.On<string>("RolarDado", (message) =>
        {
            // Quando uma mensagem for recebida, mostramos o modal com a mensagem

            _notificationMessage = message;
            ShowModal = true;
            _rolagens = RollCountService.RenderRoll()
                .Split(";").ToList();
            _hasRolls = RollCountService.IsQueueNotEmpty();
            InvokeAsync(StateHasChanged);

            
        });


        _hubConnectionPersonagem.On<Personagem>("AtualizarFicha", personagemNovo =>
        {
            var personagemASerAtualizado = _personagens.Find(p => p.PersonagemId == personagemNovo.PersonagemId);
            

            personagemASerAtualizado!.Nome = personagemNovo.Nome;
            personagemASerAtualizado.Nivel = personagemNovo.Nivel;
            personagemASerAtualizado.Pv = personagemNovo.Pv;
            personagemASerAtualizado.PvTotal = personagemNovo.PvTotal;
            personagemASerAtualizado.Armadura = personagemNovo.Armadura;
            personagemASerAtualizado.ImageUrl = personagemNovo.ImageUrl;


            InvokeAsync(StateHasChanged);

        });


        await _hubConnectionDice.StartAsync();
        await _hubConnectionPersonagem.StartAsync();
    }

    private void CloseModal()
    {
        ShowModal = false;
        StateHasChanged();
    }



    public async ValueTask DisposeAsync()
    {
        if (_hubConnectionDice is null) return;

        await _hubConnectionDice.StopAsync(); // Para a conexão
        await _hubConnectionDice.DisposeAsync();


        if (_hubConnectionPersonagem is null) return;

        await _hubConnectionPersonagem.StopAsync(); // Para a conexão
        await _hubConnectionPersonagem.DisposeAsync();
    }

    private void HandleClick(int id)
    {
        Navigation.NavigateTo($"/Personagens/{id}");
    }


    private void RollDice()
    {
        try
        {
            var diceResult = Roller.Roll(DicePrompt);

            var message = $"Rolagem Personalizada:\n{diceResult}";
            RollCountService.AddRoll(message);
            DicePrompt = string.Empty;

            HubContext.Clients.All.SendAsync("RolarDado", message);
        }
        catch
        {
            _notificationMessage = "Erro Ao rolar dado";
            ShowModal = true;
            StateHasChanged();
        }
    }

    private void HandleInputDice(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            RollDice();
        }
    }

}

